h1. Cellar nodes

This chapter describes the Cellar nodes manipulation commands.

h2. Nodes identification

When you installed the Cellar feature, your Karaf instance became automatically a Cellar cluster node,
and hence tries to discover the others Cellar nodes.

You can list the known Cellar nodes using the list-nodes command:

{code}
karaf@root> cluster:node-list
   ID                               Host Name              Port
* [172.17.42.1:5701              ] [172.17.42.1         ] [ 5701]
{code}

The starting '*' indicates that it's the Karaf instance on which you are logged on (the local node).

h2. Testing nodes

You can ping a node to test it:

{code}
karaf@root> cluster:node-ping 172.17.42.1:5701
PING 172.17.42.1:5701
from 1: req=172.17.42.1:5701 time=15 ms
from 2: req=172.17.42.1:5701 time=9 ms
from 3: req=172.17.42.1:5701 time=9 ms
from 4: req=172.17.42.1:5701 time=10 ms
from 5: req=172.17.42.1:5701 time=9 ms
from 6: req=172.17.42.1:5701 time=9 ms
from 7: req=172.17.42.1:5701 time=9 ms
from 8: req=172.17.42.1:5701 time=9 ms
from 9: req=172.17.42.1:5701 time=9 ms
from 10: req=172.17.42.1:5701 time=9 ms
{code}

h2. Node Components: listener, producer, handler, consume, and synchronizer

A Cellar node is actually a set of components, each component is dedicated to a special purpose.

The etc/org.apache.karaf.cellar.node.cfg configuration file is dedicated to the configuration of the local node.
It's where you can control the status of the different components.

h3. Synchronizers and sync policy

A synchronizer is invoked when you:
* Cellar starts
* a node joins a cluster group (see [groups] for details about cluster groups)
* you explicitly call the cluster:sync command

We have a synchronizer per resource: feature, bundle, config, obr (optional).

Cellar supports three sync policies:
* cluster (default): if the node is the first one in the cluster, it pushes its local state to the cluster, else if it's
not the first node in the cluster, the node will update its local state with the cluster one (meaning that the cluster
is the master).
* node: in this case, the node is the master, it means that the cluster state will be overwritten by the node state.
* disabled: in this case, it means that the synchronizer is not used at all, meaning the node or the cluster are not
updated at all (at sync time).

You can configure the sync policy (for each resource, and each cluster group) in the etc/org.apache.karaf.cellar.groups.cfg
configuration file:

{code}
default.bundle.sync = cluster
default.config.sync = cluster
default.feature.sync = cluster
default.obr.urls.sync = cluster
{code}

The cluster:sync command allows you to "force" the sync:

{code}
karaf@root> cluster:sync
Synchronizing cluster group default
        bundle: done
        config: done
        feature: done
        obr.urls: No synchronizer found for obr.urls
{code}

It's also possible to sync only a resource using:
* -b (--bundle) for bundle
* -f (--feature) for feature
* -c (--config) for configuration
* -o (--obr) for OBR URLs

or a given cluster group using the -g (--group) option.

h3. Producer, consumer, and handlers

To notify the other nodes in the cluster, Cellar produces a cluster event.

For that, the local node uses a producer to create and send the cluster event.
You can see the current status of the local producer using the cluster:producer-status command:

{code}
karaf@root> cluster:producer-status
   Node                             Status
* [172.17.42.1:5701              ] [ON   ]

{code}

The cluster:producer-stop and cluster:producer-start commands allow you to stop or start the local cluster event
producer:

{code}
karaf@root> cluster:producer-stop
   Node                             Status
* [172.17.42.1:5701              ] [OFF  ]
karaf@root> cluster:producer-start
   Node                             Status
* [172.17.42.1:5701              ] [ON   ]
{code}

When the producer is off, it means that the node is "isolated" from the cluster as it doesn't send "outbound" cluster events
to the other nodes.

On the other hand, a node receives the cluster events on a consumer. Like for the producer, you can see and control the
consumer using dedicated command:

{code}
karaf@root> cluster:consumer-status
   Node                             Status
* [172.17.42.1:5701              ] [ON   ]
karaf@root> cluster:consumer-stop
   Node                             Status
* [172.17.42.1:5701              ] [OFF  ]
karaf@root> cluster:consumer-start
   Node                             Status
* [172.17.42.1:5701              ] [ON   ]
{code}

When the consumer is off, it means that node is "isolated" from the cluster as it doesn't receive "inbound" cluster events
from the other nodes.

Different cluster events are involved. For instance, we have cluster event for feature, for bundle, for configuration, for OBR, etc.
When a consumer receives a cluster event, it delegates the handling of the cluster event to a specific handler, depending of the
type of the cluster event.
You can see the different handlers and their status using the cluster:handler-status command:

{code}
karaf@root> cluster:handler-status
   Node                             Status  Event Handler
* [172.17.42.1:5701              ] [ON   ] org.apache.karaf.cellar.config.ConfigurationEventHandler
* [172.17.42.1:5701              ] [ON   ] org.apache.karaf.cellar.bundle.BundleEventHandler
* [172.17.42.1:5701              ] [ON   ] org.apache.karaf.cellar.features.FeaturesEventHandler
{code}

You can stop or start a specific handler using the cluster:handler-stop and cluster:handler-start commands.

When a handler is stopped, it means that the node will receive the cluster event, but will not update the local resources
dealt by the handler.

h3. Listeners

The listeners are listening for local resource change.

For instance, when you install a feature (with feature:install), the feature listener traps the change and broadcast this
change as a cluster event to other nodes.

To avoid some unexpected behaviors (especially when you stop a node), most of the listeners are switch off by default.

The listeners status are configured in the etc/org.apache.karaf.cellar.node.cfg configuration file.

NB: enabling listeners is at your own risk. We encourage you to use cluster dedicated commands and MBeans to manipulate
the resources on the cluster.

h2. Clustered resources

Cellar provides dedicated commands and MBeans for clustered resources.

Please, go into the [cluster groups|groups] section for details.