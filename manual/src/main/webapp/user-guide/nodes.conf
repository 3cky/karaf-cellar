h1. Cellar nodes

This chapter describes the Cellar nodes manipulation commands.

h2. Nodes identification

When you installed the Cellar feature, your Karaf instance became automatically a Cellar cluster node,
and hence tries to discover the others Cellar nodes.

You can list the known Cellar nodes using the list-nodes command:

{code}
karaf@root()> cluster:node-list
  | Id             | Host Name | Port
-------------------------------------
x | node2:5702     | node2 | 5702
  | node1:5701     | node1 | 5701
{code}

The starting 'x' indicates that it's the Karaf instance on which you are logged on (the local node).

h2. Testing nodes

You can ping a node to test it:

{code}
karaf@root()> cluster:node-ping node1:5701
PING node1:5701
from 1: req=node1:5701 time=11 ms
from 2: req=node1:5701 time=12 ms
from 3: req=node1:5701 time=13 ms
from 4: req=node1:5701 time=7 ms
from 5: req=node1:5701 time=12 ms

{code}

h2. Nodes sync

Cellar allows nodes to 'sync' state. It currently covers features, configs, and bundles.

For instance, if you install a feature (eventadmin for example) on node1:

{code}
karaf@root> feature:install eventadmin
karaf@root()> feature:list |grep -i eventadmin
eventadmin                            | 3.0.1            | x         | standard-3.0.1              | OSGi Event Admin service specification for event-b
{code}

You can see that the eventadmin feature has been installed on node2:

{code}
karaf@root()> feature:list |grep -i eventadmin
eventadmin                            | 3.0.1            | x         | standard-3.0.1              | OSGi Event Admin service specification for event-b

{code}

Features uninstall works in the same way. Basically, Cellar synchronisation is completely transparent.

Configuration is also synchronized.
