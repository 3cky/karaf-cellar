h1. Cellar groups

You can define groups in Cellar. A group allows you to define specific nodes and resources that are to be
working together. This permits some nodes (those outside the group) not to need to sync'ed with changes of
a node within a group.

By default, the Cellar nodes go into the default group:

{code}
karaf@root> cluster:group-list
   Group                  Members
* [default             ] [node1:5701* ]
{code}

The 'x' indicates a local group. A local group is a group containing the local node (where we are connected).

h2. New group

You can create a new group using the group-create command:

{code}
karaf@root> cluster:group-create test
{code}

For now, the test group hasn't any nodes:

{code}
karaf@root> cluster:group-list
   Group                  Members
* [default             ] [node1:5701* ]
  [test                ] []
{code}

h2. Group nodes

You can declare a node member of one of more groups:

{code}
araf@root> cluster:group-join test
   Group                  Members
* [default             ] [node1:5701* ]
* [test                ] [node1:5701* ]
{code}

You can specify the node ID as argument (after the cluster group).
The node can be local or remote.

h2. Clustered Resources and Cluster Groups

h3. Features

Cellar can manipulate features and features repositories on cluster groups.

You can use cluster:feature-* commands or the corresponding MBean for that.

You can list the features repositories on a given cluster group:

{code}
karaf@root> cluster:feature-url-list default
mvn:org.apache.karaf.cellar/apache-karaf-cellar/2.3.4-SNAPSHOT/xml/features
mvn:org.apache.karaf.assemblies.features/enterprise/2.3.8/xml/features
mvn:org.jclouds.karaf/jclouds-karaf/1.4.0/xml/features
mvn:org.apache.karaf.assemblies.features/standard/2.3.8/xml/features
mvn:org.ops4j.pax.cdi/pax-cdi-features/0.8.0/xml/features
{code}

You can add a repository on a cluster group using the cluster:feature-url-add command:

{code}
karaf@root> cluster:feature-url-add default mvn:org.apache.activemq/activemq-karaf/5.10.0/xml/features
{code}

You can remove a repository from a cluster group using the cluster:feature-url-remove command:

{code}
karaf@root> cluster:feature-url-remove default mvn:org.apache.activemq/activemq-karaf/5.10.0/xml/features
{code}

You can list the features on a given cluster group:

{code}
karaf@root> cluster:feature-list default |more
Features in cluster group default
 Status        Version          Name
[uninstalled] [0.8.0          ] pax-cdi-1.1-web-weld
[uninstalled] [3.0.7.RELEASE  ] spring
[uninstalled] [1.4.0          ] jclouds-cloudfiles-uk
[uninstalled] [1.4.0          ] jclouds-aws-s3
[uninstalled] [1.4.0          ] jclouds-services
...
{code}

You can install a feature on a cluster group using the cluster:feature-install command:

{code}
karaf@root> cluster:feature-install default eventadmin
{code}

You can uninstall a feature from a cluster group, using the cluster:feature-uninstall command:

{code}
karaf@root> cluster:feature-uninstall default eventadmin
{code}

Cellar also provides a feature listener, disabled by default as you can see in etc/org.apache.karaf.cellar.node.cfg configuration
file:

{code}
feature.listener = false
{code}

The listener listens for the following local feature changes:
* add features repository
* remove features repository
* install feature
* uninstall feature

h3. Bundles

Cellar can manipulate bundles on cluster groups.

You can use cluster:bundle-* commands or the corresponding MBean for that.

You can list the bundles in a cluster group using the cluster:bundle-list command:

{code}
karaf@root> cluster:bundle-list default |more
Bundles in cluster group default
 ID     State        Name
[0   ] [Active     ] Apache Karaf :: Diagnostic :: Common (2.3.8)
[1   ] [Active     ] Apache Karaf :: Admin :: Core (2.3.8)
[2   ] [Active     ] Apache Karaf :: Shell :: OSGi Commands (2.3.8)
[3   ] [Active     ] Apache Karaf :: Diagnostic :: Command (2.3.8)
 ...
{code}

You can install a bundle on a cluster group using the cluster:bundle-install command:

{code}
karaf@root> cluster:bundle-install default mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.commons-lang/2.4_6
{code}

You can start a bundle in a cluster group using the cluster:bundle-start command:

{code}
karaf@root> cluster:bundle-start default commons-lang
{code}

You can stop a bundle in a cluster group using the cluster:bundle-stop command:

{code}
karaf@root> cluster:bundle-stop default commons-lang
{code}

You can uninstall a bundle from a cluster group using the cluster:bundle-uninstall command:

{code}
karaf@root> cluster:bundle-uninstall default commons-lang
{code}

Like for the feature, Cellar provides a bundle listener disabled by default in etc/org.apache.karaf.cellar.nodes.cfg:

{code}
bundle.listener = false
{code}

The bundle listener listens the following local bundle changes:
* install bundle
* start bundle
* stop bundle
* uninstall bundle

h3. Configurations

Cellar can manipulate configurations on cluster groups.

You can use cluster:config-* commands or the corresponding MBean for that.

You can list the configurations on a cluster group using the cluster:config-list command:

{code}
karaf@root> cluster:config-list default |more
----------------------------------------------------------------
Pid:            org.apache.karaf.command.acl.jaas
Properties:
   update = admin
   service.pid = org.apache.karaf.command.acl.jaas
----------------------------------------------------------------
...
{code}

YOu can list properties in a config using the cluster:config-proplist command:

{code}
karaf@root> cluster:config-proplist default org.apache.karaf.jaas
Property list for configuration PID org.apache.karaf.jaas in cluster group default
Key                                      Value
encryption.prefix                        {CRYPT}
encryption.name
encryption.enabled                       false
encryption.suffix                        {CRYPT}
encryption.encoding                      hexadecimal
service.pid                              org.apache.karaf.jaas
encryption.algorithm                     MD5
{code}

You can set or append a value to a config property using the cluster:config-propset or cluster:config-propappend command:

{code}
karaf@root> cluster:config-propset default my.config my.property my.value
{code}

You can delete a property in a config using the cluster:config-propdel command:

{code}
karaf@root> cluster:config-propdel default my.config my.property
{code}

You can delete the whole config using the cluster:config-delete command:

{code}
karaf@root> cluster:config-delete default my.config
{code}

Like for feature and bundle, Cellar provides a config listener disabled by default in etc/org.apache.karaf.cellar.nodes.cfg:

{code}
config.listener = false
{code}

The config listener listens the following local config changes:
* create a config
* add/delete/change a property
* delete a config

As some properties may be local to a node, Cellar excludes some property by default.
You can see the current excluded properties using the cluster:config-property-excluded command:

{code}
karaf@node1()> cluster:config-propexcluded
service.factoryPid, felix.fileinstall.filename, felix.fileinstall.dir, felix.fileinstall.tmpdir, org.ops4j.pax.url.mvn.defaultRepositories
{code}

You can modify this list using the same command, or by editing the etc/org.apache.karaf.cellar.node.cfg configuration file:

{code}
#
# Excluded config properties from the sync
# Some config properties can be considered as local to a node, and should not be sync on the cluster.
#
config.excluded.properties = service.factoryPid, felix.fileinstall.filename, felix.fileinstall.dir, felix.fileinstall.tmpdir, org.ops4j.pax.url.mvn.defaultRepositories
{code}

h3. OBR (optional)

See the [OBR section|obr] for details.

h3. EventAdmin (optiona)

See the [EventAdmin section|event] for details.

h2. Blocking policy

You can define a policy to filter the cluster events exchanges by the nodes (inbound or outbound).

It allows you to block or allow some resources on the cluster.

By adding a resource id in a blacklist, you block the resource.
By adding a resource id in a whitelist, you allow the resource.

The blocking policies are configured in the etc/org.apache.karaf.cellar.groups.cfg configuration file.

The format of the properties key used is:

[CLUSTER_GROUP].[CLUSTER_RESOURCE].[WHITELIST|BLACKLIST].[INBOUND|OUTBOUND]

and the value is a comma separated list of resource identifier (* wildcard is allowed).

For instance, by default, we have:

{code}
default.features.whitelist.inbound = *
default.features.whitelist.outbound = *
default.features.blacklist.inbound = config,management,hazelcast,cellar*
default.features.blacklist.outbound = config,management,hazelcast,cellar*
{code}

It means that:
* for the default cluster group, regarding features on the cluster, we allow all (*) inbound and outbound
* on the other hand, for the default cluster group, we block config, management, hazelcast and all cellar features inbound and outbound.