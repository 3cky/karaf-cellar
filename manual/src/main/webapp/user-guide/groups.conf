h1. Cellar groups

You can define groups in Cellar. A group allows you to define specific nodes and resources that are to be
working together. This permits some nodes (those outside the group) not to need to sync'ed with changes of
a node within a group.

By default, the Cellar nodes go into the default group:

{code}
karaf@root()> cluster:group-list
  | Group   | Members
-----------------------------------------------
x | default | node2:5702 node1:5701(x)
{code}

The 'x' indicates a local group. A local group is a group containing the local node (where we are connected).

h2. New group

You can create a new group using the group-create command:

{code}
karaf@root()> cluster:group-create test
{code}

For now, the test group hasn't any nodes:

{code}
karaf@node1()> cluster:group-list
  | Group   | Members
-----------------------------------------------
x | default | node2:5702 node1:5701(x)
  | test    |
{code}

h2. Group configuration

You can see the configuration PID associated with a given group, for instance the default group:

{code}
karaf@root()> cluster:config-list default |more
----------------------------------------------------------------
Pid:            org.apache.karaf.command.acl.jaas
Located:        cluster/local
Blocked:
Properties:
   update = admin
   service.pid = org.apache.karaf.command.acl.jaas
----------------------------------------------------------------
Pid:            org.apache.karaf.service.acl.command.system.start-level
Located:        cluster/local
Blocked:
Properties:
   execute = admin                           # admin can set any start level, including < 100
   start-level[/[^0-9]*/] = viewer               # viewer can obtain the current start level
   execute[/.*/,/[^0-9]*/] = viewer               # viewer can obtain the current start level
   * = *
   start-level = admin                           # admin can set any start level, including < 100
   service.guard = (&(osgi.command.scope=system)(osgi.command.function=start-level))
   execute[/.*/,/.*[0-9][0-9][0-9]+.*/] = manager # manager can set startlevels above 100
   service.pid = org.apache.karaf.service.acl.command.system.start-level
   start-level[/.*[0-9][0-9][0-9]+.*/] = manager # manager can set startlevels above 100
----------------------------------------------------------------
...
{code}

You can see that for each configuration PID, you have where the configuration is located: locally to the node or on the cluster.
You also have the blocking policy (inbound or outbound).

You can use the cluster:config-property-list and config-property-set commands to list, add and edit the configuration.

For instance, in the test group, we don't have any configuration:

{code}
karaf@root()> cluster:config-list test
No PIDs found for group:test
{code}

We can create a tstcfg config in the test group, containing name=value property:

{code}
karaf@root()> cluster:config-property-set test tstcfg name value
{code}

Now, we have this property in the test group:

{code}
karaf@root()> cluster:config-property-list test testcfg
Property list for configuration PID testcfg for cluster group test
   name = value
   service.pid = testcfg
{code}

h2. Group nodes

You can declare a node member of one of more groups:

{code}
karaf@node2()> cluster:group-join test node1:5701
  | Group   | Members
-----------------------------------------------
x | default | node2:5702(x) node1:5701
  | test    | node1:5701
{code}

The node can be local or remote.

Now, the nodes of a given group will inherit of all configuration defined in the group. This means that
node1 now knows the tstcfg configuration because it's a member of the test group:

{code}
karaf@root()> config:edit tstcfg
karaf@root()> property-list
   service.pid = testcfg
   name = value
{code}

h2. Group features

Configuration and features can be assigned to a given group.

{code}
karaf@root()> cluster:feature-list default |more
Name                                    | Version          | Installed | Located       | Blocked
------------------------------------------------------------------------------------------------
gemini-blueprint                        | 1.0.0.RELEASE    |           | cluster/local |
package                                 | 3.0.2            | x         | cluster/local |
jclouds-api-route53                     | 1.8.1            |           | cluster/local |
jclouds-rackspace-clouddns-uk           | 1.8.1            |           | cluster/local |
cellar-cloud                            | 3.0.1-SNAPSHOT   |           | local         | in/out
webconsole                              | 3.0.2            |           | cluster/local |
cellar-shell                            | 3.0.1-SNAPSHOT   | x         | local         | in/out
...
{code}

{code}
karaf@root()> cluster:feature-list test|more
Name                                    | Version          | Installed | Located       | Blocked
------------------------------------------------------------------------------------------------
gemini-blueprint                        | 1.0.0.RELEASE    |           | cluster/local |
package                                 | 3.0.2            | x         | cluster/local |
jclouds-api-route53                     | 1.8.1            |           | cluster/local |
jclouds-rackspace-clouddns-uk           | 1.8.1            |           | cluster/local |
cellar-cloud                            | 3.0.1-SNAPSHOT   |           | local         | in/out
webconsole                              | 3.0.2            |           | cluster/local |
cellar-shell                            | 3.0.1-SNAPSHOT   | x         | local         | in/out
...
{code}

In the list, you can see where the feature is located (on the cluster or on the local node), and the blocking policy (if the feature is blocked inbound/outbound).

Now we can "install" a feature for a given cluster group:

{code}
karaf@root()> cluster:feature-install test eventadmin
{code}

Below, we see that the eventadmin feature has been installed on this member of the test group:

{code}
karaf@root()> feature:list |grep -i eventadmin
eventadmin                            | 3.0.1            | x         | standard-3.0.1              | OSGi Event Admin service specification for event-b
{code}
